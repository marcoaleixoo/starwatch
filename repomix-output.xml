This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  types/
    noa-engine.d.ts
  main.ts
  styles.css
.gitignore
.repomixignore
index.html
package.json
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".repomixignore">
MANIFESTO.md
AGENTS.md
</file>

<file path="src/types/noa-engine.d.ts">
declare module 'noa-engine' {
  export interface EngineOptions {
    [key: string]: unknown;
  }

  export interface TargetedBlock {
    position: [number, number, number];
    adjacent: [number, number, number];
  }

  export interface World {
    on(event: 'worldDataNeeded', handler: (id: string, data: any, x: number, y: number, z: number) => void): void;
    setChunkData(id: string, data: any): void;
  }

  export interface Inputs {
    down: {
      on(event: string, handler: (event: any) => void): void;
    };
    bind(action: string, bindings: string | string[]): void;
    pointerLock(): void;
    exitPointerLock(): void;
  }

  export interface Entities {
    names: {
      mesh: string;
    };
    getPositionData(id: number): {
      position: [number, number, number];
      width: number;
      height: number;
    };
    addComponent(id: number, name: string, data: any): void;
  }

  export interface Rendering {
    getScene(): any;
    makeStandardMaterial(options?: Record<string, unknown>): any;
  }

  interface Container {
    canvas: HTMLCanvasElement;
  }

  export class Engine {
    constructor(options?: EngineOptions);
    world: World;
    registry: any;
    rendering: Rendering;
    inputs: Inputs;
    entities: Entities;
    playerEntity: number;
    targetedBlock: TargetedBlock | null;
    container: Container;
    camera: any;
    on(event: string, handler: (dt: number) => void): void;
    setBlock(id: number, x: number, y: number, z: number): void;
  }
}
</file>

<file path="src/main.ts">
import './styles.css';
import { Engine } from 'noa-engine';
import { CreateBox } from '@babylonjs/core/Meshes/Builders/boxBuilder';
import { Vector3 } from '@babylonjs/core/Maths/math.vector';
import '@babylonjs/core/Materials/standardMaterial';

const crosshairEl = document.querySelector<HTMLDivElement>('.crosshair');
const energyEl = document.getElementById('status-energy');
const heatEl = document.getElementById('status-heat');

const engineOptions = {
  debug: true,
  showFPS: true,
  chunkSize: 32,
  chunkAddDistance: 1.5,
  chunkRemoveDistance: 2.1,
  playerStart: [0, 6, 0],
};

const noa = new Engine(engineOptions);

const DIRT_NAME = 'dirt';
const GRASS_NAME = 'grass';
const ROCK_NAME = 'rock';

noa.registry.registerMaterial(DIRT_NAME, { color: [0.36, 0.29, 0.19] });
noa.registry.registerMaterial(GRASS_NAME, { color: [0.12, 0.45, 0.24] });
noa.registry.registerMaterial(ROCK_NAME, { color: [0.4, 0.4, 0.46] });

const dirtID = noa.registry.registerBlock(1, { material: DIRT_NAME });
const grassID = noa.registry.registerBlock(2, { material: GRASS_NAME });
const rockID = noa.registry.registerBlock(3, { material: ROCK_NAME });

type PaletteEntry = {
  id: number;
  label: string;
  hotkey: string;
};

const buildPalette: PaletteEntry[] = [
  { id: rockID, label: 'ROCK', hotkey: '1' },
  { id: grassID, label: 'GRASS', hotkey: '2' },
];

let selectedIndex = 0;

const PLATFORM_HALF = 5; // creates 10x10 area centered at origin
const PLATFORM_Y = 1;

function withinPlatform(x: number, z: number) {
  return x >= -PLATFORM_HALF && x < PLATFORM_HALF && z >= -PLATFORM_HALF && z < PLATFORM_HALF;
}

function getVoxelId(x: number, y: number, z: number) {
  if (!withinPlatform(x, z)) {
    return 0;
  }

  if (y === PLATFORM_Y) {
    return rockID;
  }

  return 0;
}

noa.world.on('worldDataNeeded', (id, data, x, y, z) => {
  for (let i = 0; i < data.shape[0]; i += 1) {
    for (let j = 0; j < data.shape[1]; j += 1) {
      for (let k = 0; k < data.shape[2]; k += 1) {
        const voxel = getVoxelId(x + i, y + j, z + k);
        data.set(i, j, k, voxel);
      }
    }
  }

  noa.world.setChunkData(id, data);
});

const playerEntity = noa.playerEntity;
const positionData = noa.entities.getPositionData(playerEntity);
const scene = noa.rendering.getScene();

const toolbarEl = document.getElementById('toolbar');
const toolbarButtons: HTMLButtonElement[] = [];

const playerMesh = CreateBox('player-box', { size: 1 }, scene);
playerMesh.scaling = new Vector3(positionData.width, positionData.height, positionData.width);
playerMesh.material = noa.rendering.makeStandardMaterial();

noa.entities.addComponent(playerEntity, noa.entities.names.mesh, {
  mesh: playerMesh,
  offset: [0, positionData.height / 2, 0],
});

noa.inputs.down.on('fire', () => {
  if (!noa.targetedBlock) return;
  const [x, y, z] = noa.targetedBlock.position;
  noa.setBlock(0, x, y, z);
});

noa.inputs.down.on('alt-fire', () => {
  if (!noa.targetedBlock) return;
  const [x, y, z] = noa.targetedBlock.adjacent;
  const blockId = buildPalette[selectedIndex]?.id ?? rockID;
  noa.setBlock(blockId, x, y, z);
});

noa.inputs.bind('alt-fire', ['Mouse2', 'KeyE']);
noa.inputs.bind('jump', ['Space']);

noa.on('tick', (dt) => {
  updateHud();
  updateCrosshair();
});

if (toolbarEl) {
  initializeToolbar();
} else {
  window.addEventListener('DOMContentLoaded', initializeToolbar, { once: true });
}

function updateCrosshair() {
  if (!crosshairEl) return;
  const state = noa.targetedBlock ? 'target' : 'idle';
  crosshairEl.dataset.state = state;
}

function updateHud() {
  const pos = noa.entities.getPositionData(playerEntity).position;
  if (energyEl) energyEl.textContent = `POS ${pos.map((n) => n.toFixed(1)).join(' ')}`;
  if (heatEl) heatEl.textContent = `BLOCK ${buildPalette[selectedIndex]?.label ?? '---'}`;
}

window.addEventListener('keydown', (event) => {
  if (event.code === 'Digit1') selectPaletteIndex(0);
  if (event.code === 'Digit2') selectPaletteIndex(1);
});

const canvas = noa.container?.canvas;

if (canvas) {
  canvas.addEventListener('click', () => {
    if (canvas.requestPointerLock) {
      canvas.requestPointerLock();
    }
  });
}

window.addEventListener('blur', () => {
  if (document.pointerLockElement) {
    try {
      document.exitPointerLock();
    } catch (error) {
      // ignore
    }
  }
});

declare global {
  interface Window {
    noa?: typeof noa;
  }
}

window.noa = noa;

function initializeToolbar() {
  if (!toolbarEl) return;
  toolbarEl.innerHTML = '';
  toolbarButtons.length = 0;
  buildPalette.forEach((entry, index) => {
    const button = document.createElement('button');
    button.type = 'button';
    button.className = 'toolbar__slot';
    button.dataset.index = String(index);
    button.innerHTML = `<sup>${entry.hotkey}</sup>${entry.label}`;
    button.addEventListener('click', (event) => {
      event.preventDefault();
      selectPaletteIndex(index);
    });
    toolbarButtons.push(button);
    toolbarEl.appendChild(button);
  });
  renderToolbar();
}

function selectPaletteIndex(index: number) {
  if (index < 0 || index >= buildPalette.length) return;
  if (selectedIndex === index) return;
  selectedIndex = index;
  updateHud();
  renderToolbar();
}

function renderToolbar() {
  toolbarButtons.forEach((button, index) => {
    if (index === selectedIndex) {
      button.classList.add('is-active');
    } else {
      button.classList.remove('is-active');
    }
  });
}
</file>

<file path="src/styles.css">
:root {
  color-scheme: dark;
  font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
}

* {
  box-sizing: border-box;
}

html,
body {
  margin: 0;
  padding: 0;
  height: 100%;
  overflow: hidden;
  background: radial-gradient(circle at top, #0b1423 0%, #05070f 70%);
  color: #d9e6ff;
}

#starwatch-ui {
  position: fixed;
  inset: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  padding: 24px;
  z-index: 5;
  pointer-events: none;
}

.crosshair {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 28px;
  height: 28px;
  transform: translate(-50%, -50%);
  pointer-events: none;
}

.crosshair::before,
.crosshair::after {
  content: '';
  position: absolute;
  background: rgba(160, 190, 255, 0.9);
  border-radius: 1px;
  transition: background 0.18s ease, transform 0.18s ease;
}

.crosshair::before {
  width: 100%;
  height: 2px;
  top: 50%;
  left: 0;
  transform: translateY(-50%);
}

.crosshair::after {
  width: 2px;
  height: 100%;
  left: 50%;
  top: 0;
  transform: translateX(-50%);
}

.crosshair[data-state='target']::before,
.crosshair[data-state='target']::after {
  background: rgba(255, 138, 102, 0.95);
  transform: scale(1.05);
}

.hud-panel {
  display: flex;
  gap: 12px;
  align-self: flex-start;
  font-size: 12px;
  letter-spacing: 0.04em;
  text-transform: uppercase;
  padding: 10px 14px;
  border-radius: 8px;
  background: rgba(10, 16, 26, 0.75);
  border: 1px solid rgba(90, 134, 211, 0.35);
  box-shadow: 0 18px 36px rgba(0, 0, 0, 0.35);
  pointer-events: none;
}

.hud-panel span {
  opacity: 0.85;
}

.toolbar {
  margin-top: auto;
  margin-bottom: 20px;
  display: flex;
  gap: 14px;
  pointer-events: auto;
  background: rgba(8, 12, 20, 0.65);
  border: 1px solid rgba(80, 126, 214, 0.4);
  padding: 12px 18px;
  border-radius: 16px;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
}

.toolbar__slot {
  position: relative;
  min-width: 70px;
  padding: 10px 14px;
  background: rgba(20, 28, 44, 0.8);
  border: 1px solid rgba(116, 164, 255, 0.35);
  color: #dce8ff;
  font-size: 12px;
  letter-spacing: 0.03em;
  text-transform: uppercase;
  border-radius: 12px;
  cursor: pointer;
  transition: transform 0.12s ease, border-color 0.12s ease, background 0.12s ease;
}

.toolbar__slot sup {
  display: block;
  font-size: 10px;
  opacity: 0.6;
  margin-bottom: 4px;
}

.toolbar__slot.is-active {
  transform: translateY(-4px);
  border-color: rgba(160, 210, 255, 0.85);
  background: linear-gradient(180deg, rgba(54, 82, 132, 0.95), rgba(22, 32, 56, 0.95));
  box-shadow: 0 8px 20px rgba(60, 140, 255, 0.35);
}

.toolbar__slot:active {
  transform: translateY(-2px);
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",
    "strict": true,
    "baseUrl": ".",
    "paths": {}
  },
  "include": ["src"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite';

export default defineConfig({
  server: {
    host: true,
    port: 5173,
  },
  preview: {
    host: true,
    port: 4173,
  },
});
</file>

<file path=".gitignore">
node_modules/
dist/
.env
docs/
noa-examples/
</file>

<file path="index.html">
<!doctype html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Starwatch — Prototype</title>
    <link rel="stylesheet" href="/src/styles.css" />
  </head>
  <body>
    <div id="starwatch-ui">
      <div class="crosshair" data-state="idle"></div>
      <div class="hud-panel">
        <span id="status-energy">POS 0 0 0</span>
        <span id="status-heat">BLOCK ROCK</span>
      </div>
      <div class="toolbar" id="toolbar"></div>
    </div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "starwatch",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "start": "vite",
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "sandbox": "vite --config sandbox/vite.config.ts"
  },
  "dependencies": {
    "@babylonjs/core": "^6.1.0",
    "babylonjs-inspector": "^5.14.1",
    "noa-engine": "^0.33.0",
    "repomix": "^1.8.0",
    "voxel-crunch": "^0.2.1"
  },
  "devDependencies": {
    "typescript": "^5.9.3",
    "vite": "^5.4.21"
  }
}
</file>

</files>
